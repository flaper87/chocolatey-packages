<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>1.4.1</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer, Tim Collins</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
      Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

      A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

      The key features of Vault are:

      * **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
      * **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
      * **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
      * **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
      * **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

      For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
      ## 1.4.1 (April 30th, 2020)

      CHANGES: 

      * auth/aws: The default set of metadata fields added in 1.4.1 has been changed to `account_id` and `auth_type` 
      * storage/raft: Disallow `ha_storage` to be specified if `raft` is set as the `storage` type. 

      IMPROVEMENTS:

      * auth/aws: The set of metadata stored during login is now configurable 
      * auth/aws: Improve region selection to avoid errors seen if the account hasn't enabled some newer AWS regions 
      * auth/azure: Enable login from Azure VMs with user-assigned identities 
      * auth/gcp: The set of metadata stored during login is now configurable 
      * auth/gcp: The type of alias name used during login is now configurable 
      * auth/ldap: Improve error messages during LDAP operation failures 
      * identity: Add a batch delete API for identity entities 
      * identity: Improve performance of logins when no group updates are needed 
      * metrics: Add `vault.identity.num_entities` metric 
      * secrets/kv: Allow `delete-version-after` to be reset to 0 via the CLI 
      * secrets/rabbitmq: Improve error handling and reporting 
      * ui: Provide One Time Password during Operation Token generation process 

      BUG FIXES:

      * auth/okta: Fix MFA regression
      * auth/userpass: Fix upgrade value for `token_bound_cidrs` being ignored due to incorrect key provided 
      * config/seal: Fix segfault when seal block is removed 
      * core: Fix an issue where users attempting to build Vault could receive Go module checksum errors 
      * core: Fix blocked requests if a SIGHUP is issued during a long-running request has the state lock held. 
        Also fixes deadlock that can happen if `vault debug` with the config target is ran during this time.
        
      * core: Always rewrite the .vault-token file as part of a `vault login` to ensure permissions and ownership are set correctly 
      * database/mongodb: Fix context deadline error that may result due to retry attempts on failed commands
        
      * http: Fix superflous call messages from the http package on logs caused by missing returns after `respondError` calls 
      * namespace (enterprise): Fix namespace listing to return `key_info` when a scoping namespace is also provided. 
      * seal/gcpkms: Fix panic that could occur if all seal parameters were provided via environment
        variables 
      * storage/raft: Fix memory allocation and incorrect metadata tracking issues with snapshots 
      * storage/raft: Fix panic that could occur if `disable_clustering` was set to true on Raft storage cluster 
      * storage/raft: Handle errors returned from the API during snapshot operations 
      * sys/wrapping: Allow unwrapping of wrapping tokens which contain nil data 

      ## Previous Releases
      For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v1.4.1/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/tico24/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2020</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
