<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>1.5.0</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer, Tim Collins</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
      Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

      A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

      The key features of Vault are:

      * **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
      * **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
      * **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
      * **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
      * **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

      For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
      ## 1.5.0
      ### July 21st, 2020

      CHANGES:

      * audit: Token TTL and issue time are now provided in the auth portion of audit logs.
      * auth/gcp: Changes the default name of the entity alias that gets created to be the role ID for both IAM and GCE authentication.
      * core: Remove the addition of newlines to parsed configuration when using integer/boolean values
      * cubbyhole: Reject reads and writes to an empty ("") path.
      * storage/gcs: The `credentials_file` config option has been removed. The `GOOGLE_APPLICATION_CREDENTIALS` environment variable or default credentials may be used instead
      * storage/raft: The storage configuration now accepts a new `max_entry_size` config that will limit the total size in bytes of any entry committed via raft. It defaults to `"1048576"` (1MiB).
      * token: Token creation with custom token ID via `id` will no longer allow periods (`.`) as part of the input string. The final generated token value may contain periods, such as the `s.` prefix for service token indication.
      * token: Token renewals will now return token policies within the `token_policies` , identity policies within `identity_policies`, and the full policy set within `policies`.

      IMPROVEMENTS:

      * audit: Replication status requests are no longer audited.
      * audit: Added mount_type field to requests and responses.
      * auth/aws: Add support for Web Identity credentials
      * auth/jwt: Support users that are members of more than 200 groups on Azure
      * auth/kerberos: Support identities without userPrincipalName
      * auth/kubernetes: Allow disabling `iss` validation
      * auth/kubernetes: Try reading the ca.crt and TokenReviewer JWT from the default service account
      * cli: Support reading TLS parameters from file for the `vault operator raft join` command.
      * cli: Add a new subcommand, `vault monitor`, for tailing server logs in the console.
      * core: Add the Go version used to build a Vault binary to the server message output.
      * core: Added Password Policies for user-configurable password generation
      * core: New telemetry metrics covering token counts, token creation, KV secret counts, lease creation.
      * physical/gcs: The storage backend now uses a dedicated client for HA lock updates to prevent lock table update failures when flooded by other client requests. 
      * physical/spanner: The storage backend now uses a dedicated client for HA lock updates to prevent lock table update failures when flooded by other client requests.
      * plugin: Add SDK method, `Sys.ReloadPlugin`, and CLI command, `vault plugin reload`, for reloading plugins.
      * plugin (enterprise): Add a scope field to plugin reload, which when global, reloads the plugin anywhere in a cluster. 
      * sdk/framework: Support accepting TypeFloat parameters over the API 
      * secrets/aws: Add iam_groups parameter to role create/update
      * secrets/database: Add static role rotation for MongoDB Atlas database plugin
      * secrets/database: Add static role rotation for MSSQL database plugin
      * secrets/database: Allow InfluxDB to use insecure TLS without cert bundle 
      * secrets/gcp: Support BigQuery dataset ACLs in absence of IAM endpoints
      * secrets/pki: Allow 3072-bit RSA keys
      * secrets/ssh: Add a CA-mode role option to specify signing algorithm
      * secrets/ssh: The Vault SSH Helper can now be configured to reference a mount in a namespace
      * secrets/transit: Transit requests that make use of keys now include a new field  `key_version` in their responses
      * secrets/transit: Improving transit batch encrypt and decrypt latencies
      * sentinel: Add a sentinel config section, and "additional_enabled_modules", a list of Sentinel modules that may be imported in addition to the defaults.
      * ui: Update TTL picker styling on SSH secret engine
      * ui: Only render the JWT input field of the Vault login form on mounts configured for JWT auth
      * ui: Add replication dashboards.  Improve replication management workflows.
      * ui: Update alert banners to match design systems black text.

      BUG FIXES:

      * auth/oci: Fix issue where users of the Oracle Cloud Infrastructure (OCI) auth method could not authenticate when the plugin backend was mounted at a non-default path.
      * core: Extend replicated cubbyhole fix in 1.4.0 to cover case where a performance primary is also a DR primary
      * seal/awskms: fix AWS KMS auto-unseal when AWS_ROLE_SESSION_NAME not set
      * sentinel: fix panic due to concurrent map access when rules iterate over metadata maps
      * secrets/aws: Fix issue where performance standbys weren't able to generate STS credentials after an IAM access key rotation in AWS and root IAM credential update in Vault
      * secrets/database: Fix issue where rotating root database credentials while Vault's storage backend is unavailable causes Vault to lose access to the database
      * secrets/database: Fix issue that prevents performance standbys from connecting to databases after a root credential rotation
      * secrets/gcp: Fix issue were updates were not being applied to the `token_scopes` of a roleset.
      * secrets/kv: Return the value of delete_version_after when reading kv/config, even if it is set to the default.
      * ui: Add Toggle component into core addon so it is available in KMIP and other Ember Engines.
      * ui: Disallow max versions value of large than 9999999999999999 on kv2 secrets engine. 
      * ui: Add and upgrade missing dependencies to resolve a failure with `make static-dist`.

      ## Previous Releases
      For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v1.5.0/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/tico24/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2020</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
