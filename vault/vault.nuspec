<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>1.3.1</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer, Tim Collins</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
      Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

      A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

      The key features of Vault are:

      * **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
      * **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
      * **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
      * **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
      * **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

      For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
      ## 1.3.1 (December 18th, 2019)

      IMPROVEMENTS:

      * agent: Add ability to set `exit-after-auth` via the CLI [GH-7920]
      * auth/ldap: Add a `request_timeout` configuration option to prevent connection
        requests from hanging [GH-7909]
      * auth/kubernetes: Add audience to tokenreview API request for Kube deployments where issuer
        is not Kube. [GH-74]
      * secrets/ad: Add a `request_timeout` configuration option to prevent connection
        requests from hanging [AD-59]
      * storage/postgresql: Add support for setting `connection_url` from enviornment 
        variable `VAULT_PG_CONNECTION_URL` [GH-7937]
      * telemetry: Add `enable_hostname_label` option to telemetry stanza [GH-7902]
      * telemetry: Add accept header check for prometheus mime type [GH-7958]

      BUG FIXES:

      * agent: Fix issue where Agent exits before all templates are rendered when 
        using and `exit_after_auth` [GH-7899]
      * auth/aws: Fixes region-related issues when using a custom `sts_endpoint` by adding
        a `sts_region` parameter [GH-7922]
      * auth/token: Fix panic when getting batch tokens on a performance standby from a role
        that does not exist [GH-8027]
      * core: Improve warning message for lease TTLs [GH-7901]
      * identity: Fix identity token panic during invalidation [GH-8043]
      * plugin: Fix a panic that could occur if a mount/auth entry was unable to
        mount the plugin backend and a request that required the system view to be 
        retrieved was made [GH-7991]
      * replication: Add `generate-public-key` endpoint to list of allowed endpoints
        for existing DR secondaries
      * secrets/gcp: Fix panic if bindings aren't provided in roleset create/update. [GCP-56]  
      * secrets/pki: Prevent generating certificate on performance standby when storing
        [GH-7904]
      * secrets/transit: Prevent restoring keys to new names that are sub paths [GH-7998]
      * storage/s3: Fix a bug in configurable S3 paths that was preventing use of S3 as
        a source during `operator migrate` operations [GH-7966]
      * ui: Ensure secrets with a period in their key can be viewed and copied [GH-7926]
      * ui: Fix status menu after demotion [GH-7997]
      * ui: Fix select dropdowns in Safari when running Mojave [GH-8023]

      ## Previous Releases
      For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v1.3.1/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/tico24/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2019</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
