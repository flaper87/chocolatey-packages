<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>1.3.2</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer, Tim Collins</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
      Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

      A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

      The key features of Vault are:

      * **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
      * **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
      * **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
      * **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
      * **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

      For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
      ## 1.3.2 (January 22nd, 2020)

      SECURITY:
       * When deleting a namespace on Vault Enterprise, in certain circumstances, the deletion
         process will fail to revoke dynamic secrets for a mount in that namespace. This will 
         leave any dynamic secrets in remote systems alive and will fail to clean them up. This
         vulnerability, CVE-2020-7220, affects Vault Enterprise 0.11.0 and newer.

      IMPROVEMENTS:
       * auth/aws: Add aws metadata to identity alias [GH-7975]
       * auth/kubernetes: Allow both names and namespaces to be set to "*" [GH-78]

      BUG FIXES:

      * auth/azure: Fix Azure compute client to use correct base URL [AZURE-27]
      * auth/ldap: Fix renewal of tokens without cofigured policies that are 
        generated by an LDAP login [GH-8072]
      * auth/okta: Fix renewal of tokens without configured policies that are 
        generated by an Okta login [GH-8072]
      * core: Fix seal migration error when attempting to migrate from auto unseal to shamir [GH-8172]
      * core: Fix seal migration config issue when migrating from auto unseal to auto unseal [GH-8172]
      * plugin: Fix issue where a plugin unwrap request potentially used an expired token [GH-8058]
      * replication: Fix issue where a forwarded request from a performance/standby node could run into 
        a timeout 
      * secrets/database: Fix issue where a manual static role rotation could potentially panic [GH-8098]
      * secrets/database: Fix issue where a manual root credential rotation request is not forwarded
        to the primary node [GH-8125]
      * secrets/database: Fix issue where a manual static role rotation request is not forwarded
        to the primary node [GH-8126]
      * secrets/database/mysql: Fix issue where special characters for a MySQL password were encoded [GH-8040]
      * ui: Fix deleting namespaces [GH-8132]
      * ui: Fix Error handler on kv-secret edit and kv-secret view pages [GH-8133]
      * ui: Fix OIDC callback to check storage [GH-7929].
      * ui: Change `.box-radio` height to min-height to prevent overflow issues [GH-8065]

      ## Previous Releases
      For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v1.3.2/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/tico24/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2020</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
